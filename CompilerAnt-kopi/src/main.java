import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;


public class main {
    static StringToHTMLFile ht = new StringToHTMLFile();
    public static void main(String[] args) throws IOException{
        // we expect exactly one argument: the name of the input file
        for (int i = 0; i < args.length; i++) {
            String filename = args[i];

            // open the input file
            CharStream input = CharStreams.fromFileName(filename);
            //new ANTLRFileStream (filename); // depricated

            // create a lexer/scanner
            ccLexer lex = new ccLexer(input);

            // get the stream of tokens from the scanner
            CommonTokenStream tokens = new CommonTokenStream(lex);

            // create a parser
            ccParser parser = new ccParser(tokens);

            // and parse anything from the grammar for "start"
            ParseTree parseTree = parser.start();

            // Construct an interpreter and run it on the parse tree
            PrettyPrint prettyPrint = new PrettyPrint();
            String result = prettyPrint.visit(parseTree);
            System.out.println(result);
            main.ht.handler(PrettyPrint.html.toString(), filename);
            PrettyPrint.html.delete(0, PrettyPrint.html.length());
        }
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.
class PrettyPrint extends AbstractParseTreeVisitor<String> implements ccVisitor<String> {
    static StringBuilder html = new StringBuilder();
    String currentFile;

    @Override
    public String visitStart(ccParser.StartContext ctx) {
        return visitHw(ctx.hw());
    }

    @Override
    public String visitHw(ccParser.HwContext ctx) {
        visitHardware(ctx.hardware());
        visitInput(ctx.input());
        visitOutputs(ctx.outputs());
        visitLatches(ctx.latches());
        visitUpdate(ctx.update());
        visitSimulate(ctx.simulate());
        return null;
    }

    @Override
    public String visitHardware(ccParser.HardwareContext ctx) {
        String navn = ctx.IDENT().getText();
        html.append("<!DOCTYPE html>\n" +
                "<html><head><title> " + navn + "</title>\n" +
                "<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n" +
                "<script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n" +
                "<script type=\"text/javascript\" id=\"MathJax-script\"\n" +
                "async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\">\n" +
                "</script></head><body>\n" + "<h1>" + navn + "</h1>");
        currentFile = navn;
        return null;
    }

    @Override
    public String visitInput(ccParser.InputContext ctx) {
        html.append("<h2> Inputs </h2>\n");
        StringBuilder test = new StringBuilder();

        for (int i = 0; i < ctx.IDENT().size(); i++) {
            // Append the text of each IDENT to the test
            test.append(ctx.IDENT(i).getText());
        }
        html.append(test);
        return null;
    }

    @Override
    public String visitOutputs(ccParser.OutputsContext ctx) {
        html.append("<h2> Outputs </h2>\n");
        StringBuilder out = new StringBuilder();

        for (int i = 0; i < ctx.IDENT().size(); i++) {
            // Append the text of each IDENT to the test
            out.append(ctx.IDENT(i).getText()).append("<br>");

        }
        out.append("\n");
        html.append(out);
        return null;
    }

    @Override
    public String visitLatches(ccParser.LatchesContext ctx) {
        html.append("<h2> Latches </h2>\n");
        StringBuilder lat = new StringBuilder();

        for (int i = 0; i < ctx.IDENT().size(); i++) {
            // Append the text of each IDENT to the test
            lat.append(ctx.IDENT(i).getText()).append(" ");
            if (i % 2 == 0) {
                lat.append(" &rarr; ");
            } else {

                lat.append("<br>");
            }

        }
        html.append(lat);
        return null;
    }

    @Override
    public String visitUpdate(ccParser.UpdateContext ctx) {
        html.append("<h2> Update </h2>\n");
        StringBuilder upd = new StringBuilder();
        for (int i = 0; i < ctx.IDENT().size(); i++) {
            // Append the text of each IDENT to the test
            html.append(ctx.IDENT(i).getText()).append(" ").append(" &larr; \\((");
            checkExp(ctx.exp(i));
            html.append(")\\)");
            html.append("<br>");
        }


     html.append(upd);
     return null;
    }
    void checkExp(ccParser.ExpContext exp){
        int parent = 0;
        if(exp.getChildCount() > 0){
            for(int i = 0; i < exp.getChildCount(); i++){
                if(exp.getChild(i).getChildCount() > 0) {
                    checkExp((ccParser.ExpContext) exp.getChild(i));
                }else{
                     if(exp instanceof ccParser.NotContext){
                         html.append("\\neg");
                     }else if(exp instanceof ccParser.OrContext){
                         html.append("\\wedge");
                     }else if(exp instanceof ccParser.AndContext){
                         html.append("\\vee");
                     }else if(exp instanceof ccParser.ParenContext){
                         if(parent % 2 == 0){
                             html.append("(");
                         }else{
                             html.append(")");
                         }
                         parent++;
                     }else if(exp instanceof ccParser.NothingContext){
                         System.out.println("Bare s√• du ikke er tom homo");
                     }
                     if(exp instanceof ccParser.VarContext){
                         html.append("(").append(exp.getText()).append(")");
                     }
                }
            }
        }
                                                                        ;
    }
    @Override
    public String visitNot(ccParser.NotContext ctx) {
        return null;
    }

    @Override
    public String visitOr(ccParser.OrContext ctx) {
        return null;
    }

    @Override
    public String visitVar(ccParser.VarContext ctx) {
        return null;
    }

    @Override
    public String visitAnd(ccParser.AndContext ctx) {
        return null;
    }

    @Override
    public String visitNothing(ccParser.NothingContext ctx) {
        return null;
    }

    @Override
    public String visitParen(ccParser.ParenContext ctx) {
        return null;
    }

    @Override
    public String visitSimulate(ccParser.SimulateContext ctx) {
        html.append("<br>");
        html.append("<h2>Simulation</h2>");
        String simulation = ctx.signal().get(0).getText();
        html.append(simulation).append(" = ");
        html.append(ctx.BOOLSQ().get(0).getText());
        return null;
    }

    @Override
    public String visitSignal(ccParser.SignalContext ctx) {
        return null;
    }
}




